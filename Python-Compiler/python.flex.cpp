#line 1 "python.flex.cpp"

#line 3 "python.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 150
#define YY_END_OF_BUFFER 151
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[373] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    2,    0,    0,  151,  148,  148,    4,
       46,  119,    1,   18,   21,  118,   50,   51,   14,   12,
       44,   13,   47,   16,  115,  115,   45,   48,   25,   31,
       26,  147,  147,  147,  147,   52,   53,   23,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,   54,   22,   55,   24,
        6,    5,  122,  146,  122,  142,  150,  123,  123,  143,
      124,  140,  125,  141,   11,  150,    8,    7,    9,    2,
        3,   30,    0,   37,   38,    0,   15,   34,   32,   33,

       49,   17,   35,  115,  116,  106,  112,  109,  117,   19,
       28,   29,   27,   20,  147,  147,  147,  147,   40,  147,
       86,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,   71,  147,   96,   97,
      147,  147,  147,  147,  101,  147,  147,  147,    1,  147,
      147,  147,  147,  147,  147,  147,  147,   39,    6,    5,
      122,  129,  128,  136,    0,  127,  130,  131,  132,  126,
      133,  134,    0,  135,    0,  123,  124,    0,  125,    0,
        8,    7,   10,    9,    2,  121,  120,   43,   36,    0,
      106,  107,  108,  112,  113,  114,  109,  110,  111,  115,

      117,   42,   41,  147,  147,  147,   85,  147,  147,  147,
      147,  147,  147,  147,  147,  147,   75,   92,  147,  147,
      147,  147,  147,  147,   79,  147,  147,  147,   56,  147,
      147,  147,  147,  100,  147,  147,  147,  147,   67,   63,
       76,  147,  147,  147,  147,  136,    0,    0,    0,  144,
      145,    8,   10,    9,    0,  106,  108,    0,  112,  114,
        0,  109,  111,  117,  147,   83,   84,  147,  147,  147,
       59,  147,  147,  147,  147,  147,   69,   72,   73,  147,
      147,  147,   93,  147,  147,  147,  147,   60,  147,  147,
      102,  147,  147,  147,  147,  147,   81,  147,  136,    0,

        0,  137,  108,  114,  111,   82,  147,  147,   88,   89,
       90,  147,   64,   74,  147,  147,  147,  147,   57,  147,
      147,  147,  147,  147,  147,  103,   62,  147,   61,   80,
      105,    0,    0,  147,   87,  147,  147,  147,   77,  147,
      147,   94,   95,   98,  147,  147,  104,    0,  138,  147,
      147,   58,  147,   78,  147,  147,  147,    0,   70,  147,
       91,  147,  147,   99,    0,   65,   68,  147,    0,   66,
      139,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,    1,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   23,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,    1,    1,   30,   31,   30,   30,   30,   32,
       33,   33,   33,   33,   33,   33,   33,   34,   35,   33,
       33,   33,   33,   36,   37,   33,   33,   38,   33,   33,
       39,   40,   41,   42,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   33,   53,   54,   55,   56,
       57,   58,   33,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    1,    1,
        1,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        5,    5,    5,    5,    1,    1,    1,    1,    1,    5,
        5,    5,    6,    6,    6,    6,    6,    6,    1,    7,
        1,    1,    8,    5,    5,    5,    5,    5,    5,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[405] =
    {   0,
        0,   70,   70,   74,   75,   82,   62,   69,   76,   80,
      609,   89,  608,  607,    0,    0,  609,  613,  613,  613,
      580,  599,  613,  578,  577,  592,  613,  613,   78,  575,
      613,   68,  613,   79,  102,  106,  613,  613,   73,  574,
       75,    0,  557,  543,  540,  613,  613,  570,   57,   75,
       51,   46,   77,   94,  543,  101,   67,  548,  538,  535,
      549,   91,  127,   93,   92,  540,  613,  563,  613,  613,
      588,  583,    0,  613,    0,  613,  181,    0,    0,  613,
        0,  576,    0,  579,  613,  613,  160,  613,  162,    0,
      613,  613,  578,  613,  613,  573,  556,  613,  613,  613,

      613,  555,  613,  148,  539,  152,  155,  226,  158,  553,
      613,  613,  613,  552,    0,  525,  522,  515,  613,  529,
       52,  531,  517,  525,  511,  527,  128,  136,  524,  134,
      523,  512,  510,  507,  508,  507,    0,  505,  501,    0,
      506,  500,  504,  136,    0,  498,  102,  496,  613,  495,
      151,  496,  488,  495,  500,  490,  502,  613,  547,  542,
        0,  613,  613,  184,    0,  613,  613,  613,  613,  613,
      613,  613,    0,  613,    0,    0,    0,  535,    0,  538,
      206,  613,  211,  213,    0,  613,  613,  613,  613,  502,
      202,  501,  210,  212,  500,  238,  261,  499,  290,  243,

      255,  613,  613,  481,  492,  491,    0,  490,  481,  484,
      481,  490,  485,  472,  473,  469,    0,    0,  468,  479,
      479,  478,  481,  480,    0,  155,  478,  465,    0,  476,
      459,  462,  464,    0,  457,  456,  465,  452,    0,    0,
        0,  459,  458,  460,  456,  206,    0,    0,    0,  613,
      613,  293,  313,  321,  466,  304,  307,  465,  309,  319,
      464,  463,  462,  322,  456,  467,    0,  443,  455,  439,
        0,  446,  176,  438,  443,  444,    0,    0,    0,  436,
      439,  429,    0,  438,  438,  414,  423,    0,  407,  405,
        0,  411,  406,  391,  401,  398,    0,  396,  613,    0,

        0,  613,  327,  332,  398,    0,  372,  373,    0,    0,
        0,  315,    0,    0,  325,  316,  310,  315,    0,  312,
      313,  305,  320,  297,  315,    0,    0,  304,    0,    0,
        0,    0,    0,  301,    0,  299,  292,  294,    0,  285,
      258,    0,    0,    0,  254,  259,    0,    0,  613,  254,
      257,    0,  252,    0,  249,  242,  236,    0,    0,  223,
        0,  227,  239,    0,    0,    0,    0,  216,    0,    0,
      613,  613,  375,  383,  391,  399,  407,  415,  423,  427,
      431,  439,  447,  455,  463,  471,  475,  479,  483,  263,
      258,  257,  249,  247,  246,  487,  236,  234,  233,  195,

      194,  191,  133,   84
    } ;

static const flex_int16_t yy_def[405] =
    {   0,
      372,    1,  373,  373,  374,  374,  375,  375,  376,  376,
      377,  377,  378,  378,  379,  379,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  380,  380,  372,  372,  372,  372,
      372,  381,  381,  381,  381,  372,  372,  372,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  372,  372,  372,  372,
      372,  372,  382,  372,  382,  372,  372,  383,  383,  372,
      384,  372,  385,  372,  372,  372,  372,  372,  372,  386,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  380,  380,  387,  388,  389,  380,  372,
      372,  372,  372,  372,  381,  381,  381,  381,  372,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  372,  381,
      381,  381,  381,  381,  381,  381,  381,  372,  372,  372,
      382,  372,  372,  372,  390,  372,  372,  372,  372,  372,
      372,  372,  391,  372,  392,  383,  384,  372,  385,  372,
      372,  372,  372,  372,  386,  372,  372,  372,  372,  380,
      387,  387,  387,  388,  388,  388,  389,  389,  389,  380,

      372,  372,  372,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  372,  393,  394,  395,  372,
      372,  372,  372,  372,  387,  387,  372,  388,  388,  372,
      389,  199,  396,  372,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  372,  397,

      398,  372,  372,  372,  396,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  399,  400,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  401,  372,  381,
      381,  381,  381,  381,  381,  381,  381,  402,  381,  381,
      381,  381,  381,  381,  403,  381,  381,  381,  404,  381,
      372,    0,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372
    } ;

static const flex_int16_t yy_nxt[685] =
    {   0,
       18,   19,   20,   19,   19,   19,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   36,   36,   37,   38,   39,   40,   41,   42,
       42,   43,   42,   44,   42,   45,   42,   42,   46,   18,
       47,   48,   42,   49,   50,   51,   52,   53,   54,   55,
       42,   56,   42,   57,   58,   59,   60,   61,   62,   63,
       64,   42,   42,   65,   42,   66,   42,   67,   68,   69,
       70,   71,   74,   82,   75,   72,   74,   74,   75,   79,
       82,   76,   80,   84,   74,   76,   79,   84,  371,   80,
       87,   88,   97,  128,   89,  100,  101,  129,  102,  110,

      111,   77,  113,  114,  126,   98,  103,  127,   77,   77,
      141,  208,  120,   77,   77,   77,  121,  209,  142,   77,
      122,   77,  104,  104,  104,  104,  104,  104,  104,  104,
      130,  123,  106,  124,  147,  149,  107,  369,  148,  108,
      125,  131,  155,  156,  109,  132,  106,  133,  109,  137,
      134,  153,  135,  236,  154,  138,  139,  237,  107,  149,
      140,  181,  182,  183,  182,  183,  108,  184,  104,  104,
      104,  104,  191,  191,  150,  194,  194,  194,  200,  200,
      200,  200,  215,  216,  217,  220,  151,  152,  162,  218,
      109,  233,  163,  221,  193,  365,  234,  196,  358,  349,

      201,  164,  164,  164,  246,  246,  246,  252,  182,  283,
      151,  253,  253,  182,  253,  182,  253,  165,  254,  312,
      166,  284,  191,  191,  167,  168,  299,  299,  299,  169,
      256,  256,  194,  194,  194,  313,  170,  348,  333,  171,
      332,  172,  173,  174,  193,  175,  197,  197,  197,  197,
      302,  301,  257,  300,  196,  197,  197,  197,  259,  259,
      259,  249,  248,  200,  200,  200,  200,  247,  199,  197,
      197,  197,  197,  197,  197,  264,  264,  264,  264,  370,
      260,  197,  197,  197,  197,  109,  368,  367,  366,  364,
      197,  197,  197,  363,  252,  182,  362,  201,  253,  361,

      360,  359,  357,  199,  197,  197,  197,  197,  197,  197,
      262,  262,  262,  262,  253,  182,  356,  355,  253,  262,
      262,  262,  253,  182,  256,  256,  254,  303,  303,  259,
      259,  259,  263,  262,  262,  262,  262,  262,  262,  304,
      304,  304,  264,  264,  264,  264,  193,  303,  303,  257,
      354,  196,  304,  304,  304,  353,  352,  351,  350,  347,
      346,  260,  345,  344,  201,  343,  342,  341,  340,  257,
      339,  338,  337,  336,  260,   73,   73,   73,   73,   73,
       73,   73,   73,   78,   78,   78,   78,   78,   78,   78,
       78,   81,   81,   81,   81,   81,   81,   81,   81,   83,

       83,   83,   83,   83,   83,   83,   83,   85,   85,   85,
       85,   85,   85,   85,   85,   90,   90,   90,   90,   90,
       90,   90,   90,   86,   86,   86,   86,   86,   86,   86,
       86,  105,  105,  335,  105,  115,  115,  334,  115,  161,
      263,  161,  331,  161,  161,  330,  161,  176,  329,  328,
      176,  176,  176,  327,  176,  177,  177,  177,  326,  177,
      177,  325,  177,  179,  179,  324,  179,  179,  179,  323,
      179,  185,  322,  185,  185,  185,  185,  185,  185,  192,
      192,  321,  192,  195,  195,  320,  195,  198,  198,  319,
      198,  305,  318,  317,  305,  316,  315,  314,  311,  310,

      309,  308,  307,  306,  263,  199,  372,  372,  372,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  261,  258,  255,  372,  251,  250,  160,  159,  245,
      244,  243,  242,  241,  240,  239,  238,  235,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  219,
      214,  213,  212,  211,  210,  207,  206,  205,  204,  203,
      202,  190,  189,  188,  187,  186,  180,  178,  160,  159,
      158,  157,  146,  145,  144,  143,  136,  119,  118,  117,

      116,  112,   99,   96,   95,   94,   93,   92,  372,   91,
       91,   86,   17,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372
    } ;

static const flex_int16_t yy_chk[685] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    7,    3,    2,    4,    5,    4,    5,
        8,    3,    5,    9,    6,    4,    6,   10,  404,    6,
       12,   12,   29,   52,   12,   32,   32,   52,   34,   39,

       39,    7,   41,   41,   51,   29,   34,   51,    8,    3,
       57,  121,   49,    4,    5,    9,   49,  121,   57,   10,
       49,    6,   35,   35,   35,   35,   36,   36,   36,   36,
       53,   50,   35,   50,   62,   63,   35,  403,   62,   35,
       50,   53,   65,   65,   35,   54,   35,   54,   36,   56,
       54,   64,   54,  147,   64,   56,   56,  147,   35,  151,
       56,   87,   87,   89,   89,   87,   35,   89,  104,  104,
      104,  104,  106,  106,   63,  107,  107,  107,  109,  109,
      109,  109,  127,  127,  128,  130,   63,   63,   77,  128,
      104,  144,   77,  130,  106,  402,  144,  107,  401,  400,

      109,   77,   77,   77,  164,  164,  164,  181,  181,  226,
      151,  181,  183,  183,  184,  184,  183,   77,  184,  273,
       77,  226,  191,  191,   77,   77,  246,  246,  246,   77,
      193,  193,  194,  194,  194,  273,   77,  399,  398,   77,
      397,   77,   77,   77,  191,   77,  108,  108,  108,  108,
      395,  394,  193,  393,  194,  108,  108,  108,  196,  196,
      196,  392,  391,  200,  200,  200,  200,  390,  108,  108,
      108,  108,  108,  108,  108,  201,  201,  201,  201,  368,
      196,  197,  197,  197,  197,  200,  363,  362,  360,  357,
      197,  197,  197,  356,  252,  252,  355,  201,  252,  353,

      351,  350,  346,  197,  197,  197,  197,  197,  197,  197,
      199,  199,  199,  199,  253,  253,  345,  341,  253,  199,
      199,  199,  254,  254,  256,  256,  254,  257,  257,  259,
      259,  259,  199,  199,  199,  199,  199,  199,  199,  260,
      260,  260,  264,  264,  264,  264,  256,  303,  303,  257,
      340,  259,  304,  304,  304,  338,  337,  336,  334,  328,
      325,  260,  324,  323,  264,  322,  321,  320,  318,  303,
      317,  316,  315,  312,  304,  373,  373,  373,  373,  373,
      373,  373,  373,  374,  374,  374,  374,  374,  374,  374,
      374,  375,  375,  375,  375,  375,  375,  375,  375,  376,

      376,  376,  376,  376,  376,  376,  376,  377,  377,  377,
      377,  377,  377,  377,  377,  378,  378,  378,  378,  378,
      378,  378,  378,  379,  379,  379,  379,  379,  379,  379,
      379,  380,  380,  308,  380,  381,  381,  307,  381,  382,
      305,  382,  298,  382,  382,  296,  382,  383,  295,  294,
      383,  383,  383,  293,  383,  384,  384,  384,  292,  384,
      384,  290,  384,  385,  385,  289,  385,  385,  385,  287,
      385,  386,  286,  386,  386,  386,  386,  386,  386,  387,
      387,  285,  387,  388,  388,  284,  388,  389,  389,  282,
      389,  396,  281,  280,  396,  276,  275,  274,  272,  270,

      269,  268,  266,  265,  263,  262,  261,  258,  255,  245,
      244,  243,  242,  238,  237,  236,  235,  233,  232,  231,
      230,  228,  227,  224,  223,  222,  221,  220,  219,  216,
      215,  214,  213,  212,  211,  210,  209,  208,  206,  205,
      204,  198,  195,  192,  190,  180,  178,  160,  159,  157,
      156,  155,  154,  153,  152,  150,  148,  146,  143,  142,
      141,  139,  138,  136,  135,  134,  133,  132,  131,  129,
      126,  125,  124,  123,  122,  120,  118,  117,  116,  114,
      110,  105,  102,   97,   96,   93,   84,   82,   72,   71,
       68,   66,   61,   60,   59,   58,   55,   48,   45,   44,

       43,   40,   30,   26,   25,   24,   22,   21,   17,   14,
       13,   11,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[151] =
    {   0,
0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "python.l"
#line 6 "python.l"
    #include <iostream>
    #include <string>
    #include <algorithm>
    #include <deque>
    using namespace std;

    string removeUnderline(string text);
    void calculateIndentiation(int* indentStack, int* indentStackTopIndex, int indentLength);
    void checkIndentiationForKeywords(deque<int>& keywordsLineNumber, int* indentStack, int indentStackTopIndex, int* emptyLinesCounter, int indentLength);
#line 768 "python.flex.cpp"

#line 770 "python.flex.cpp"

#define INITIAL 0
#define SHORT_SINGLE_STRING 1
#define SHORT_DOUBLE_STRING 2
#define LONG_SINGLE_STRING 3
#define LONG_DOUBLE_STRING 4
#define INDENTIATION 5
#define COMMENT 6
#define FIRSTLINE 7

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 25 "python.l"



#line 29 "python.l"
    string str;
    deque<int> keywordsLineNumber = {};
    int emptyLinesCounter = 0;
    bool isString = false;
    bool isFirstLine = true;

    int indentStackTopIndex = 0;
    int indentStack[1000];
    indentStack[0] = 0;

    int parenthesesBracketsCounter = 0;
    int squareBracketsCounter = 0;
    int curlyBracketsCounter = 0;


#line 1014 "python.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 373 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 372 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "python.l"
{ BEGIN(COMMENT); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 45 "python.l"
{ cout << "Line: " << yylineno << ". Found comment: \"" << yytext << "\"" << endl; }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 46 "python.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 48 "python.l"
{
        if(parenthesesBracketsCounter == 0 && squareBracketsCounter == 0 && curlyBracketsCounter == 0) {
            isString = false;
            BEGIN(INDENTIATION);
        }
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 55 "python.l"
{
            if(!(isString || parenthesesBracketsCounter || squareBracketsCounter || curlyBracketsCounter)) {
                calculateIndentiation(indentStack, &indentStackTopIndex, yyleng);
            }
      }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "python.l"
{
            if(!(isString || parenthesesBracketsCounter || squareBracketsCounter || curlyBracketsCounter)) {
                calculateIndentiation(indentStack, &indentStackTopIndex, yyleng*4);
            }
      }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 67 "python.l"
{ 
                            emptyLinesCounter++; 
                            calculateIndentiation(indentStack, &indentStackTopIndex, 0); 
                        }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 72 "python.l"
{
                            if(!(isString || parenthesesBracketsCounter || squareBracketsCounter || curlyBracketsCounter)) {
                                checkIndentiationForKeywords(keywordsLineNumber, indentStack, indentStackTopIndex, &emptyLinesCounter, yyleng * 4);
                                calculateIndentiation(indentStack, &indentStackTopIndex, yyleng * 4);
                                BEGIN(INITIAL);
                            }
                     }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "python.l"
{
                        if(!(isString || parenthesesBracketsCounter || squareBracketsCounter || curlyBracketsCounter)) {
                            checkIndentiationForKeywords(keywordsLineNumber, indentStack, indentStackTopIndex, &emptyLinesCounter, yyleng);
                            calculateIndentiation(indentStack, &indentStackTopIndex, yyleng);
                            BEGIN(INITIAL);
                        }
                    }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 88 "python.l"
{
                                if(!(isString || parenthesesBracketsCounter || squareBracketsCounter || curlyBracketsCounter)) {
                                    cout << "Line: " << yylineno << ". ERROR: mixed tabs and spaces (dentiation)." << endl;
                                    BEGIN(INITIAL);
                                }
                         }
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 95 "python.l"
{
                        calculateIndentiation(indentStack, &indentStackTopIndex, 0);
                        BEGIN(INITIAL);
                   }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 100 "python.l"
{ cout << "Line: " << yylineno << ". Found arithmetical operator: " << yytext << endl; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "python.l"
{ cout << "Line: " << yylineno << ". Found arithmetical operator: " << yytext << endl; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 102 "python.l"
{ cout << "Line: " << yylineno << ". Found arithmetical operator: " << yytext << endl; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 103 "python.l"
{ cout << "Line: " << yylineno << ". Found arithmetical operator: " << yytext << endl; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 104 "python.l"
{ cout << "Line: " << yylineno << ". Found arithmetical operator: " << yytext << endl; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 105 "python.l"
{ cout << "Line: " << yylineno << ". Found arithmetical operator: " << yytext << endl; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 106 "python.l"
{ cout << "Line: " << yylineno << ". Found arithmetical operator: " << yytext << endl; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 108 "python.l"
{ cout << "Line: " << yylineno << ". Found bitwise operator: " << yytext << endl; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 109 "python.l"
{ cout << "Line: " << yylineno << ". Found bitwise operator: " << yytext << endl; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 110 "python.l"
{ cout << "Line: " << yylineno << ". Found bitwise operator: " << yytext << endl; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 111 "python.l"
{ cout << "Line: " << yylineno << ". Found bitwise operator: " << yytext << endl; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 112 "python.l"
{ cout << "Line: " << yylineno << ". Found bitwise operator: " << yytext << endl; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 113 "python.l"
{ cout << "Line: " << yylineno << ". Found bitwise operator: " << yytext << endl; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 115 "python.l"
{ cout << "Line: " << yylineno << ". Found comparison operator: " << yytext << endl; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 116 "python.l"
{ cout << "Line: " << yylineno << ". Found comparison operator: " << yytext << endl; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 117 "python.l"
{ cout << "Line: " << yylineno << ". Found comparison operator: " << yytext << endl; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 118 "python.l"
{ cout << "Line: " << yylineno << ". Found comparison operator: " << yytext << endl; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 119 "python.l"
{ cout << "Line: " << yylineno << ". Found comparison operator: " << yytext << endl; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 120 "python.l"
{ cout << "Line: " << yylineno << ". Found comparison operator: " << yytext << endl; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 123 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 124 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 125 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 126 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 127 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 128 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 129 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 130 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 131 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 132 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 133 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 134 "python.l"
{ cout << "Line: " << yylineno << ". Found assignment operator: " << yytext << endl; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 136 "python.l"
{ cout << "Line: " << yylineno << ". Found delimiter: " << yytext << endl; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 137 "python.l"
{ cout << "Line: " << yylineno << ". Found delimiter: " << yytext << endl; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 138 "python.l"
{ cout << "Line: " << yylineno << ". Found delimiter: " << yytext << endl; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 139 "python.l"
{ cout << "Line: " << yylineno << ". Found delimiter: " << yytext << endl; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 140 "python.l"
{ cout << "Line: " << yylineno << ". Found delimiter: " << yytext << endl; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 141 "python.l"
{ cout << "Line: " << yylineno << ". Found delimiter: " << yytext << endl; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 143 "python.l"
{ 
        cout << "Line: " << yylineno << ". Found open parentheses bracket: " << yytext << endl;
        parenthesesBracketsCounter++; 
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 147 "python.l"
{ 
        cout << "Line: " << yylineno << ". Found close parentheses bracket: " << yytext << endl;
        parenthesesBracketsCounter--;
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 151 "python.l"
{ 
        cout << "Line: " << yylineno << ". Found open square bracket: " << yytext << endl;
        squareBracketsCounter++;
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 155 "python.l"
{
        cout << "Line: " << yylineno << ". Found close square bracket: " << yytext << endl;
        squareBracketsCounter--;
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 159 "python.l"
{ 
        cout << "Line: " << yylineno << ". Found open curly bracket: " << yytext << endl;
        curlyBracketsCounter++;
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 163 "python.l"
{
        cout << "Line: " << yylineno << ". Found close curly bracket: " << yytext << endl;
        curlyBracketsCounter--;
   }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 168 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 169 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 170 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 171 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 172 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 173 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 174 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 175 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 176 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 177 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 178 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 179 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 180 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 181 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 182 "python.l"
{ cout << "Line: " << yylineno << ". Found data type: " << yytext << endl; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 184 "python.l"
{
        cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
        keywordsLineNumber.push_back(yylineno);
        emptyLinesCounter = 0;
   }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 189 "python.l"
{
        cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
        keywordsLineNumber.push_back(yylineno);
        emptyLinesCounter = 0;
     }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 194 "python.l"
{
        cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
        keywordsLineNumber.push_back(yylineno);
        emptyLinesCounter = 0;
     }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 199 "python.l"
{
        cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
        keywordsLineNumber.push_back(yylineno);
        emptyLinesCounter = 0;
      }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 204 "python.l"
{
        cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
        keywordsLineNumber.push_back(yylineno);
        emptyLinesCounter = 0;
    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 209 "python.l"
{
        cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
        keywordsLineNumber.push_back(yylineno);
        emptyLinesCounter = 0;
    }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 214 "python.l"
{
            cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
            keywordsLineNumber.push_back(yylineno);
            emptyLinesCounter = 0;
       }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 219 "python.l"
{
            cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
            keywordsLineNumber.push_back(yylineno);
            emptyLinesCounter = 0;
        }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 224 "python.l"
{
        cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
        keywordsLineNumber.push_back(yylineno);
        emptyLinesCounter = 0;
    }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 229 "python.l"
{
        cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
        keywordsLineNumber.push_back(yylineno);
        emptyLinesCounter = 0;
      }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 234 "python.l"
{
        cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl;
        keywordsLineNumber.push_back(yylineno);
        emptyLinesCounter = 0;
     }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 239 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }     
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 240 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }      
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 241 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }        
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 242 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }           
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 243 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }           
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 244 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }          
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 245 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }     
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 246 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }  
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 247 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 248 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 249 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 250 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 251 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 252 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 253 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 254 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 255 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 256 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 257 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 258 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 259 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 260 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 261 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 262 "python.l"
{ cout << "Line: " << yylineno << ". Found keyword: " << yytext << endl; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 264 "python.l"
{
    if(yyleng == 2) {
        cout << "Line: " << yylineno << ". ERROR: found empty binary literal." << endl;
    } else {
        string text = yytext;
        text = removeUnderline(text);
        cout << "Line: " << yylineno << ". Found binary literal: " << to_string(stoll(text.substr(2), NULL, 2)) << endl;
    }
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 273 "python.l"
{ cout << "Line: " << yylineno << ". ERROR: invalid binary literal (illegal use of letter)." << endl; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 274 "python.l"
{ cout << "Line: " << yylineno << ". ERROR: invalid binary literal (illegal use of underscore)." << endl; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 276 "python.l"
{
    if(yyleng == 2) {
        cout << "Line: " << yylineno << ". ERROR: found empty hexadecimal literal." << endl;
    } else {
        string text = yytext;
        text = removeUnderline(text);
        cout << "Line: " << yylineno << ". Found hexadecimal literal: " << to_string(stoll(text.substr(2), NULL, 16)) << endl;
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 285 "python.l"
{ cout << "Line: " << yylineno << ". ERROR: invalid hexadecimal literal (illegal use of letter)." << endl; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 286 "python.l"
{ cout << "Line: " << yylineno << ". ERROR: invalid hexadecimal literal (illegal use of underscore)." << endl; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 288 "python.l"
{
    if(yyleng == 2) {
        cout << "Line: " << yylineno << ". ERROR: found empty octal literal." << endl;
    } else {
        string text = yytext;
        text = removeUnderline(text);
        cout << "Line: " << yylineno << ". Found octal literal: " << stoll("0" + text.substr(2), NULL, 8) << endl;
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 297 "python.l"
{ cout << "Line: " << yylineno << ". ERROR: invalid octal literal (unexpected character)." << endl; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 298 "python.l"
{ cout << "Line: " << yylineno << ". ERROR: invalid octal literal (illegal use of underscore)." << endl; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 300 "python.l"
{
    string text = yytext;

    if(yyleng > 1 && text[0] == '0') {
        cout << "Line: " << yylineno << ". ERROR: invalid decimal literal (illegal use of 0)." << endl;
    } else {
        text = removeUnderline(text);
        cout << "Line: " << yylineno << ". Found decimal literal: " << text << endl;
    }
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 310 "python.l"
{ cout << "Line: " << yylineno << ". ERROR: invalid decimal literal (unexpected character)." << endl; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 311 "python.l"
{ cout << "Line: " << yylineno << ". ERROR: invalid decimal literal (illegal use of underscore)." << endl; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 313 "python.l"
{ 
    BEGIN(SHORT_SINGLE_STRING);
    str.clear();
    isString = true;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 318 "python.l"
{ 
    BEGIN(SHORT_DOUBLE_STRING);  
    str.clear();
    isString = true;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 323 "python.l"
{ 
    BEGIN(LONG_SINGLE_STRING); 
    str.clear();
    isString = true;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 328 "python.l"
{ 
    BEGIN(LONG_DOUBLE_STRING); 
    str.clear();
    isString = true;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 334 "python.l"
{ str += yytext; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 335 "python.l"
{ str += yytext; }
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 336 "python.l"
{ str += yytext; }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 337 "python.l"
{ str += yytext; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 339 "python.l"
{ str += "\n"; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 340 "python.l"
{ str += "\\"; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 341 "python.l"
{ str += "\'"; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 342 "python.l"
{ str += "\""; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 343 "python.l"
{ str += "\a"; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 344 "python.l"
{ str += "\b"; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 345 "python.l"
{ str += "\f"; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 346 "python.l"
{ str += "\r"; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 347 "python.l"
{ str += "\t"; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 348 "python.l"
{ str += "\v"; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 349 "python.l"
{ str += (char)stoi(yytext + 1, NULL, 8); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 350 "python.l"
{ str += (char)stoi(yytext + 2, NULL, 16); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 351 "python.l"
{ str += (char)stoi(yytext + 2, NULL, 16); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 352 "python.l"
{ str += (char)stoi(yytext + 2, NULL, 16); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 353 "python.l"
{ str += "\'"; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 354 "python.l"
{ str += "\""; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 356 "python.l"
{
    cout << "Line: " << yylineno << ". Found inline single-quoted string literal: \'" + str + "\'" << endl;
    isString = false;
    BEGIN(INITIAL); 
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 361 "python.l"
{
    cout << "Line: " << yylineno << ". Found inline double-quoted string literal: \"" + str + "\"" << endl;
    isString = false;
    BEGIN(INITIAL); 
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 366 "python.l"
{
    cout << "Line: " << yylineno << ". Found multiline single-quoted string literal:\n\'" + str + "\'" << endl;
    isString = false;
    BEGIN(INITIAL); 
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 371 "python.l"
{
    cout << "Line: " << yylineno << ". Found multiline double-quoted string literal:\n\"" + str + "\"" << endl;
    isString = false;
    BEGIN(INITIAL); 
}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 377 "python.l"
{
    int strLength = static_cast<int>(str.length());

    if(strLength > 1 && str[strLength - 1] == '\\') {
        str.erase(strLength - 1, 1);
    } else {
        cout << "Line: " << yylineno << ". ERROR: inline string literal is not closed." << endl;
        BEGIN(INITIAL);
    }
}
	YY_BREAK
case YY_STATE_EOF(SHORT_SINGLE_STRING):
case YY_STATE_EOF(SHORT_DOUBLE_STRING):
#line 387 "python.l"
{
    cout << "Line: " << yylineno << ". ERROR: inline string literal is not closed." << endl;
    BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(LONG_SINGLE_STRING):
case YY_STATE_EOF(LONG_DOUBLE_STRING):
#line 391 "python.l"
{
    cout << "Line: " << yylineno << ". ERROR: multiline string literal is not closed." << endl;
    BEGIN(INITIAL);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 396 "python.l"
{ cout << "Line: " << yylineno << ". Found identifier: " << yytext << endl; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INDENTIATION):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(FIRSTLINE):
#line 398 "python.l"
{
            checkIndentiationForKeywords(keywordsLineNumber, indentStack, indentStackTopIndex, &emptyLinesCounter, 0);
            return 0;
        }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 403 "python.l"
{}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 405 "python.l"
{}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 407 "python.l"
ECHO;
	YY_BREAK
#line 2036 "python.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 373 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 373 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 372);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 407 "python.l"


string removeUnderline(string input)
{
    string str = input;
    str.erase(remove(str.begin(), str.end(), '_'), str.end());
    return str;
}

void calculateIndentiation(int* indentStack, int* indentStackTopIndex, int indentLength) {
    if(indentLength > indentStack[*indentStackTopIndex]) {
        (*indentStackTopIndex)++;
        indentStack[*indentStackTopIndex] = indentLength;
        cout << "Line: " << yylineno << ". Found indent: " << to_string(indentLength) << endl;
    }

    if(indentLength < indentStack[*indentStackTopIndex]) {
        int tmpIndex = *indentStackTopIndex;

        while(indentLength < indentStack[tmpIndex]) { tmpIndex--; }

        if(indentLength != indentStack[tmpIndex]) { cout << "Line: " << yylineno << ". ERROR: incosistent dedent: " << to_string(indentLength) << endl; }
        else {
            while(*indentStackTopIndex > tmpIndex) { 
                (*indentStackTopIndex)--;
                cout << "Line: " << yylineno << ". Found dedent. Indent count: " << indentStack[*indentStackTopIndex] << endl; 
            }
        }  
    }
}

void checkIndentiationForKeywords(deque<int>& keywordsLineNumber, int* indentStack, int indentStackTopIndex, int* emptyLinesCounter, int indentLength) {
    if(keywordsLineNumber.empty()) {
        *emptyLinesCounter = 0;
        return;
    }

    if(yylineno - *emptyLinesCounter - keywordsLineNumber.front() != 1 || indentLength - indentStack[indentStackTopIndex] <= 0) {
        cout << "Line: " << keywordsLineNumber.front() << ". ERROR: not found indent for keyword." << endl;
    }

    *emptyLinesCounter = 0;
    keywordsLineNumber.pop_front();
}
